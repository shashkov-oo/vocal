// pitch.js ‚Äî CREPE (ml5) c –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—á–µ–π –º–æ–¥–µ–ª–∏, –∫–Ω–æ–ø–∫–æ–π #btnPitch,
// –≤—ã–≤–æ–¥–æ–º –≤ #liveNote –∏ –∑–µ–ª—ë–Ω–æ–π –ª–∏–Ω–∏–µ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ (VPT.setLivePitch)

(function () {
  const btn = document.getElementById("btnPitch");
  const out = document.getElementById("liveNote");

  let audioCtx = null;
  let stream = null;
  let detector = null;
  let raf = 0;
  let on = false;

  // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π GitHub CDN —Å –º–æ–¥–µ–ª—è–º–∏,
  // –∑–∞—Ç–µ–º –¥–≤–∞ ¬´–∑–µ—Ä–∫–∞–ª–∞¬ª –∏–∑ npm-–ø–∞–∫–µ—Ç–∞ (–∏–Ω–æ–≥–¥–∞ —É –Ω–∏—Ö –º–µ–Ω—è–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ/–∫—ç—à).
  const MODEL_BASES = [
    "https://cdn.jsdelivr.net/gh/ml5js/ml5-data-and-models/models/pitch-detection/crepe",
    "https://unpkg.com/ml5@0.12.2/dist/models/pitch-detection/crepe",
    "https://cdn.jsdelivr.net/npm/ml5@0.12.2/dist/models/pitch-detection/crepe",
  ];

  const NOTE_NAMES = ["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];
  const midiName = (m) => `${NOTE_NAMES[((m%12)+12)%12]}${Math.floor(m/12)-1}`;

  function freqToMidiCents(freq) {
    if (!Number.isFinite(freq) || freq <= 0) return null;
    const m = 69 + 12 * Math.log2(freq / 440);
    const mr = Math.round(m);
    const cents = Math.round((m - mr) * 100);
    return { midi: m, round: mr, cents };
  }

  function ui(state) {
    on = state;
    if (btn) btn.textContent = state ? "‚èπ –í—ã–∫–ª—é—á–∏—Ç—å" : "üé§ –í–∫–ª—é—á–∏—Ç—å –ø–∏—Ç—á-—Ç—Ä–µ–∫–µ—Ä";
  }
  function write(s) { if (out) out.textContent = s; }
  function setLive(f0) {
    if (window.VPT && typeof VPT.setLivePitch === "function") VPT.setLivePitch(f0);
  }

  function loop() {
    if (!on || !detector) return;
    detector.getPitch((err, f) => {
      if (!on) return;
      if (err) { raf = requestAnimationFrame(loop); return; }
      if (Number.isFinite(f) && f > 0) {
        const fm = freqToMidiCents(f);
        if (fm) {
          write(`${midiName(fm.round)} ¬∑ ${f.toFixed(1)} Hz ¬∑ ${fm.cents >= 0 ? "+" : ""}${fm.cents}¬¢`);
        } else {
          write("‚Äî");
        }
        setLive(f);
      } else {
        write("‚Äî");
        setLive(null);
      }
      raf = requestAnimationFrame(loop);
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä, –ø–µ—Ä–µ–±–∏—Ä–∞—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –º–æ–¥–µ–ª–µ–π
  async function createDetectorWithFallback(ctx, micStream) {
    let lastErr = null;
    for (const base of MODEL_BASES) {
      try {
        // –í–ê–ñ–ù–û: base –ë–ï–ó –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ "/", ml5 —Å–∞–º –¥–æ–±–∞–≤–ª—è–µ—Ç "/model.json"
        await new Promise((resolve, reject) => {
          const d = ml5.pitchDetection(base, ctx, micStream, (e) => e ? reject(e) : resolve());
          // –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ resolve ‚Äî –≤–µ—Ä–Ω—ë–º d –Ω–∞—Ä—É–∂—É
          if (!eGuarded(d)) resolve(d);
        });
        // ml5 –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é ‚Äî –¥–æ—Å—Ç–∞–Ω–µ–º –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è
        // –ø–æ—ç—Ç–æ–º—É –ø–æ–≤—Ç–æ—Ä–∏–º –≤—ã–∑–æ–≤, –Ω–æ —Ç–µ–ø–µ—Ä—å —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–µ—Ä–Ω—ë–º –æ–±—ä–µ–∫—Ç:
        return await new Promise((resolve, reject) => {
          const d2 = ml5.pitchDetection(base, ctx, micStream, (e) => e ? reject(e) : resolve(d2));
        });
      } catch (e) {
        lastErr = e;
        // –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –±–∞–∑—É
      }
    }
    throw lastErr || new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å CREPE");
  }

  // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç —Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–±–æ—Ä–æ–∫ ml5,
  // –∫–æ–≥–¥–∞ d –º–æ–∂–µ—Ç –±—ã—Ç—å undefined –Ω–∞ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  function eGuarded(x){ return x && typeof x.getPitch === "function"; }

  async function start() {
    if (on) return;
    try {
      // –ú–∏–∫—Ä–æ—Ñ–æ–Ω
      stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: false, noiseSuppression: false, autoGainControl: false,
          channelCount: 1, sampleRate: 44100
        }
      });
      audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      if (audioCtx.state === "suspended") await audioCtx.resume();

      // –î–µ—Ç–µ–∫—Ç–æ—Ä —Å fallback –ø–æ URL –º–æ–¥–µ–ª–∏
      detector = await createDetectorWithFallback(audioCtx, stream);

      ui(true); write("‚Ä¶"); loop();
    } catch (e) {
      console.error("Pitch start error:", e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–∏—Ç—á-—Ç—Ä–µ–∫–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É (https/localhost) –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞.");
      stop();
    }
  }

  function stop() {
    on = false;
    if (raf) { cancelAnimationFrame(raf); raf = 0; }
    if (detector && detector.model && detector.model.dispose) { try { detector.model.dispose(); } catch (_) {} }
    detector = null;
    if (stream) { try { stream.getTracks().forEach(t => t.stop()); } catch (_) {} stream = null; }
    if (audioCtx) { try { audioCtx.close(); } catch (_) {} audioCtx = null; }
    setLive(null); write(""); ui(false);
  }

  if (btn) btn.addEventListener("click", () => on ? stop() : start());

  // —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥–µ–±–∞–≥–∞
  window.PitchTracker = { start, stop, get running() { return on; } };
})();
